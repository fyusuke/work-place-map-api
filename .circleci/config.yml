# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@1.4.0

workflows:
  build_and_push_image:
    jobs:
      - aws-ecr/build-and-push-image:
          region: AWS_REGION
          account-url: AWS_ECR_ACCOUNT_URL
          repo: '${MY_APP_PREFIX}'
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: '${MY_APP_PREFIX}-task'
          cluster-name: '${MY_APP_PREFIX}-cluster'
          service-name: '${MY_APP_PREFIX}-service'
          container-image-name-updates: 'container=${MY_APP_PREFIX}-container,tag=${CIRCLE_SHA1}'


jobs:
  build: # job name

    # 自身のアプリディレクトリ名を設定。デフォルトは ~/project
    working_directory: ~/api

    docker: # CI環境にDockerを利用する場合の設定。
      # ベースとなるDockerイメージ
      # Node.js バリアントの Docker イメージ (-node で終わるタグ) に対しては、Node.js の LTS リリースがプリインストールされています。 
      - image: circleci/ruby:2.7.1
        environment:
#  ①注意！！ bundlerのバージョンが2.0.1以上だと、bundle installに失敗します。ここに環境として指定します。
          - BUNDLER_VERSION: 2.0.2
#  ②注意！！ circleCIは仮想環境を構築するので、そのときに使うデータベースを指定する必要があります。
          - RAILS_ENV: test
      # 利用可能なバージョンを指定：https://circleci.com/docs/2.0/circleci-images/#mysql
      - image: circleci/mysql:8.0.0
        # Docker用のMySQLイメージの環境変数：https://hub.docker.com/_/mysql
        environment:
          - MYSQL_ROOT_PASSWORD: password
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: 127.0.0.1

    steps:
      # CI環境上の working_directory の値の場所にGitリポジトリをコピーする。
      - checkout

      # キャッシュが save_cache されていればリストアする(あれば速くなる)
      - restore_cache:
          # save_cacheのkeyと同じにすること
          keys:
            # 現在の"Gemfile.lock"を使い、checksum "Gemfile.lock"の値を出した上で、同じkeyがないか検索
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          # 任意のrunの名前
          name: "install dependencies"
          # コマンドを設定する
          # ①bundler2.0.1以降のものを使っているのであれば、環境変数と合わせて指定する必要があります。
          command: |
            gem install bundler -v 2.0.2
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      # パッケージなどのファイルをキャッシュする
      - save_cache:
          # List of directories which should be added to the cache
          paths:
            - ./vendor/bundle
          # Unique identifier for this cache
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

# ②ちょっと無理やりですが、database.ymlとdatabase.yml.ciを入れ替える記述です。
#      - run: mv config/database.yml.ci config/database.yml 

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:migrate
#      - run: bundle exec rake db:schema:load

# rubocopを走らせる記述です。
#      - run:
#          name: Rubocop
#          command: bundle exec rubocop

# rspecを走らせる記述です。
#      # run tests!
#      - run:
#          name: run tests
#          command: |
#            mkdir /tmp/test-results
#            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

# ③ここでRspecJunitFormatterというgemをインストールしていないとエラーになります。gemfileに記述しましょう。
#            bundle exec rspec \
#              --format progress \
#              --format RspecJunitFormatter \
#              --out /tmp/test-results/rspec.xml \
#              --format progress \
#              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results